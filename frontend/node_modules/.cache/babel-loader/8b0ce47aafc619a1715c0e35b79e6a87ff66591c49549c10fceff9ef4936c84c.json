{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    const url = \"http://localhost:8000\";\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const {\n      data\n    } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const {\n      upload_id: uploadId\n    } = data;\n\n    // Step 2: Upload each chunk of the file\n\n    let offset = 0;\n    let completedChunks = 0;\n    let errorOccurred = false;\n    const formData = new FormData();\n    for (let i = 0; i < chunks; i++) {\n      const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);\n      formData.append(`chunk-${i}`, chunk);\n    }\n    formData.append(\"filename\", filename);\n    formData.append(\"upload_id\", uploadId);\n    const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`, formData);\n    const {\n      error\n    } = response.data;\n\n    // for (let i = 0; i < chunks; i++) {\n    //   const chunk = file.slice(offset, offset + chunkSize);\n    //   const chunkNumber = i;\n    //   const formData = new FormData();\n    //   formData.append(\"chunk\", chunk);\n    //   const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n    //     formData\n    //   );\n    //   if (response.data.error) {\n    //     errorOccurred = true;\n    //     break;\n    //   }\n    //   completedChunks++;\n    //   offset += chunkSize;\n    // }\n\n    // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n    //   formData,\n    //   {\n    //     onUploadProgress: (progressEvent) => {\n    //       const progress = Math.round(\n    //         (progressEvent.loaded / progressEvent.total) * 100\n    //       );\n    //       setUploadProgress(progress);\n    //     },\n    //   }\n    // );\n\n    console.log(errorOccurred);\n    console.log(completedChunks === chunks);\n    // Step 3: Complete the upload on the server\n    if (!errorOccurred && completedChunks === chunks) {\n      console.log(\"~dsd\");\n      await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`);\n      setUploadProgress(100);\n    } else {\n      setErrorMessage(\"An error occurred while uploading the file.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: uploadFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileUpload\",\n        children: \"Choose a file to upload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileUpload\",\n        name: \"file\",\n        className: \"form-control-file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n      max: \"100\",\n      value: uploadProgress,\n      className: \"mt-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Xz8bhDaN5EfUCI1qG/yqxAQ72q8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","uploadProgress","setUploadProgress","errorMessage","setErrorMessage","uploadFile","event","preventDefault","file","target","elements","files","filename","name","fileSize","size","chunkSize","chunks","Math","ceil","url","data","post","upload_id","uploadId","offset","completedChunks","errorOccurred","formData","FormData","i","chunk","slice","append","response","chunkNumber","error","console","log","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","max","value","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    const url = \"http://localhost:8000\";\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const { data } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const { upload_id: uploadId } = data;\n\n    // Step 2: Upload each chunk of the file\n\n\n    let offset = 0;\n  let completedChunks = 0;\n  let errorOccurred = false;\n\n  const formData = new FormData();\n  for (let i = 0; i < chunks; i++) {\n    const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);\n    formData.append(`chunk-${i}`, chunk);\n  }\n  formData.append(\"filename\", filename);\n  formData.append(\"upload_id\", uploadId);\n\n  const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`, formData);\n  const { error } = response.data;\n\n  // for (let i = 0; i < chunks; i++) {\n  //   const chunk = file.slice(offset, offset + chunkSize);\n  //   const chunkNumber = i;\n  //   const formData = new FormData();\n  //   formData.append(\"chunk\", chunk);\n  //   const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n  //     formData\n  //   );\n  //   if (response.data.error) {\n  //     errorOccurred = true;\n  //     break;\n  //   }\n  //   completedChunks++;\n  //   offset += chunkSize;\n  // }\n\n\n\n      // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n      //   formData,\n      //   {\n      //     onUploadProgress: (progressEvent) => {\n      //       const progress = Math.round(\n      //         (progressEvent.loaded / progressEvent.total) * 100\n      //       );\n      //       setUploadProgress(progress);\n      //     },\n      //   }\n      // );\n\n\n    console.log(errorOccurred)\n    console.log(completedChunks === chunks)\n    // Step 3: Complete the upload on the server\n    if (!errorOccurred && completedChunks === chunks) {\n      console.log(\"~dsd\")\n    await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`);\n    setUploadProgress(100);\n  } else {\n    setErrorMessage(\"An error occurred while uploading the file.\");\n  }\n  }\n\n  return (\n    <form onSubmit={uploadFile}>\n      <div className=\"form-group\">\n        <label htmlFor=\"fileUpload\">Choose a file to upload:</label>\n        <input\n          type=\"file\"\n          id=\"fileUpload\"\n          name=\"file\"\n          className=\"form-control-file\"\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Upload\n      </button>\n      {uploadProgress > 0 && (\n        <progress max=\"100\" value={uploadProgress} className=\"mt-2\" />\n      )}\n    </form>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}