{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const handleFileInput = e => {\n    setSelectedFiles(e.target.files);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!Array.isArray(selectedFiles) && selectedFiles.length === 0) {\n      console.log(typeof selectedFiles);\n      console.log(selectedFiles.length);\n      console.log(selectedFiles);\n      return;\n    }\n\n    // Initialize the upload for all files\n    const uploadIds = await Promise.all(Array.from(selectedFiles).map(file => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"fileName\", file.name);\n      return fetch(\"http://localhost:8000/initiate-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/octet-stream\",\n          \"Content-Range\": `bytes 0-${end - 1}/${file.size}`,\n          \"Content-Disposition\": `attachment; filename=\"${file.name}\"`\n        },\n        body: file\n      }).then(response => response.json()).then(data => data.uploadId);\n    }));\n\n    // Upload all chunks for each file\n    await Promise.all(Array.from(selectedFiles).map(async (file, index) => {\n      const CHUNK_SIZE = 1024 * 1024; // 1MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / CHUNK_SIZE);\n      const uploadUrl = `http://localhost:8000/upload?fileName=${encodeURIComponent(file.name)}&uploadId=${encodeURIComponent(uploadIds[index])}`;\n      const chunkPromises = [];\n      for (let chunkIndex = 0; chunkIndex < chunks; chunkIndex++) {\n        const start = chunkIndex * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, fileSize);\n        const chunk = file.slice(start, end);\n        const formData = new FormData();\n        formData.append(\"file\", chunk);\n        formData.append(\"chunkIndex\", chunkIndex);\n        formData.append(\"chunks\", chunks);\n        chunkPromises.push(fetch(uploadUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            \"Content-Range\": `bytes ${start}-${end - 1}/${file.size}`\n          },\n          body: formData.get(\"file\")\n        }));\n      }\n      await Promise.all(chunkPromises);\n    }));\n    console.log(\"Files uploaded successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6iJwk1gH4hB0xa84T6RYQXjKu58=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFiles","setSelectedFiles","handleFileInput","e","target","files","handleSubmit","preventDefault","Array","isArray","length","console","log","uploadIds","Promise","all","from","map","file","formData","FormData","append","name","fetch","method","headers","end","size","body","then","response","json","data","uploadId","index","CHUNK_SIZE","fileSize","chunks","Math","ceil","uploadUrl","encodeURIComponent","chunkPromises","chunkIndex","start","min","chunk","slice","push","get","className","children","onSubmit","type","multiple","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const handleFileInput = (e) => {\n    setSelectedFiles(e.target.files);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!Array.isArray(selectedFiles) && selectedFiles.length === 0) {\n        console.log(typeof(selectedFiles))\n        console.log(selectedFiles.length)\n        console.log(selectedFiles)\n        return;\n  }\n\n    // Initialize the upload for all files\n    const uploadIds = await Promise.all(\n      Array.from(selectedFiles).map((file) => {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"fileName\", file.name);\n        return fetch(\"http://localhost:8000/initiate-upload\", {\n          method: \"POST\",\n            headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            \"Content-Range\": `bytes 0-${end - 1}/${file.size}`,\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n          },\n          body: file,\n        })\n          .then((response) => response.json())\n          .then((data) => data.uploadId);\n      })\n    );\n\n\n    // Upload all chunks for each file\n    await Promise.all(\n      Array.from(selectedFiles).map(async (file, index) => {\n        const CHUNK_SIZE = 1024 * 1024; // 1MB\n        const fileSize = file.size;\n        const chunks = Math.ceil(fileSize / CHUNK_SIZE);\n        const uploadUrl = `http://localhost:8000/upload?fileName=${encodeURIComponent(\n          file.name\n        )}&uploadId=${encodeURIComponent(uploadIds[index])}`;\n\n        const chunkPromises = [];\n\n        for (let chunkIndex = 0; chunkIndex < chunks; chunkIndex++) {\n          const start = chunkIndex * CHUNK_SIZE;\n          const end = Math.min(start + CHUNK_SIZE, fileSize);\n          const chunk = file.slice(start, end);\n\n          const formData = new FormData();\n          formData.append(\"file\", chunk);\n          formData.append(\"chunkIndex\", chunkIndex);\n          formData.append(\"chunks\", chunks);\n\n          chunkPromises.push(\n              fetch(uploadUrl, {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/octet-stream\",\n                  \"Content-Range\": `bytes ${start}-${end - 1}/${file.size}`,\n                },\n                body: formData.get(\"file\"),\n              })\n            );\n        }\n\n        await Promise.all(chunkPromises);\n      })\n    );\n\n    console.log(\"Files uploaded successfully!\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"file\" multiple onChange={handleFileInput} />\n        <button type=\"submit\">Upload</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}