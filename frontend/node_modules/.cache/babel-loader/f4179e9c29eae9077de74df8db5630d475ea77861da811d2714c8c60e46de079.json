{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n    const response = await fetch(`http://localhost:8000/initiate-upload?filename=${filename}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', chunk);\n        formData.append('upload_id', uploadId);\n        console.log(formData);\n        const response = await fetch('http://localhost:8000/upload-chunk', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        console.log(data);\n        offset += chunkSize;\n      }\n    }\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        filename: filename,\n        upload_id: uploadId\n      })\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      encType: \"multipart/form-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: uploadFile,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","uploadFile","fileInput","document","querySelector","files","filename","name","response","fetch","method","headers","data","json","uploadId","upload_id","i","length","file","chunkSize","fileSize","size","chunks","Math","ceil","offset","j","chunk","slice","chunkNumber","formData","FormData","append","console","log","body","response2","JSON","stringify","data2","children","encType","type","multiple","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n\n    const response = await fetch(`http://localhost:8000/initiate-upload?filename=${filename}`,{\n      method: 'POST',\n\n      headers: {\n        'Content-Type': 'application/json'\n      },\n\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', chunk);\n        formData.append('upload_id', uploadId);\n        console.log(formData)\n        const response = await fetch('http://localhost:8000/upload-chunk', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        console.log(data);\n        offset += chunkSize;\n      }\n    }\n\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({filename: filename, upload_id: uploadId})\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n\n\n  return (\n      <>\n        <form encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"file\" multiple/>\n          <button type=\"button\" onClick={uploadFile}>Upload</button>\n      </form>\n      </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}