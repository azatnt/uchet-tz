{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n    const formdata = new FormData();\n    formdata.append('filename', filename);\n    const response = await fetch(`http://localhost:8000/initiate-upload/`, {\n      method: 'POST',\n      body: formdata\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', new Blob([chunk]));\n        formData.append('upload_id', uploadId);\n        const datagoi = {\n          filename: filename,\n          chunk: new Blob([chunk]),\n          upload_id: uploadId,\n          chunk_number: chunkNumber\n        };\n        for (const [key, values] of formData.entries()) {\n          console.log(`${key}: ${values}`);\n        }\n        const response = await fetch('http://localhost:8000/upload-chunk/', {\n          method: 'POST',\n          body: datagoi,\n          headers: {\n            'Content-Type': 'multipart/form-data; boundary=1234567890'\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        offset += chunkSize;\n      }\n    }\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      body: JSON.stringify({\n        filename: filename,\n        upload_id: uploadId\n      })\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      encType: \"multipart/form-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: uploadFile,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","uploadFile","fileInput","document","querySelector","files","filename","name","formdata","FormData","append","response","fetch","method","body","data","json","uploadId","upload_id","i","length","file","chunkSize","fileSize","size","chunks","Math","ceil","offset","j","chunk","slice","chunkNumber","formData","Blob","datagoi","chunk_number","key","values","entries","console","log","headers","response2","JSON","stringify","data2","children","encType","type","multiple","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n\n    const formdata = new FormData()\n    formdata.append('filename', filename)\n\n    const response = await fetch(`http://localhost:8000/initiate-upload/`,{\n      method: 'POST',\n      body: formdata\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', new Blob([chunk]));\n        formData.append('upload_id', uploadId);\n\n        const datagoi = {\n          filename: filename,\n          chunk: new Blob([chunk]),\n          upload_id: uploadId,\n          chunk_number: chunkNumber\n        }\n\n\n        for(const [key, values] of formData.entries()){\n          console.log(`${key}: ${values}`)\n        }\n\n        const response = await fetch('http://localhost:8000/upload-chunk/', {\n          method: 'POST',\n          body: datagoi,\n          headers: {\n            'Content-Type': 'multipart/form-data; boundary=1234567890'\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        offset += chunkSize;\n      }\n    }\n\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      body: JSON.stringify({filename: filename, upload_id: uploadId})\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n\n\n  return (\n      <>\n        <form encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"file\" multiple/>\n          <button type=\"button\" onClick={uploadFile}>Upload</button>\n      </form>\n      </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}