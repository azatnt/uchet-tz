{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  var ui = '';\n\n  // const initiateUpload = async () => {\n  //   const options = {\n  //     headers: {\n  //       'Content-Type': 'application/octet-stream',\n  //       'x-amz-acl': 'private'\n  //     }\n  //   };\n  //   const response = await axios.post(\n  //     `http://localhost:8000/initiate-upload?filename=${file.name}`,\n  //     null,\n  //     options\n  //   );\n  //   ui = response.data.upload_id;\n  // };\n\n  const initiateUpload = async () => {\n    const formData = new FormData();\n    formData.append('filename', file.name);\n    await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`).then(res => {\n      ui = res.data.upload_id;\n    });\n  };\n  const uploadChunk = async (chunkNumber, chunk) => {\n    console.log(chunk);\n    const data = {\n      filename: file.name,\n      chunk_number: chunkNumber,\n      chunk: chunk,\n      upload_id: ui\n    };\n    // data.append('filename', file.name)\n    // data.append('chunk_number', chunkNumber)\n    // data.append('chunk', chunk)\n    // data.append('upload_id', ui)\n    // console.log(data)\n    const options = {\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'x-amz-acl': 'private',\n        'x-amz-part-number': chunkNumber + 1,\n        'x-amz-upload-id': uploadId,\n        'Content-Length': chunk.byteLength\n      }\n    };\n    // const blob = new Blob([chunk]);\n    await axios.post(`http://localhost:8000/upload-chunk`, data).then(res => {\n      console.log(res.data);\n    });\n  };\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then(res => {\n      console.log(res.data);\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024;\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const arrayBuffer = event.target.result;\n        const totalSize = arrayBuffer.byteLength;\n        let start = 0;\n        while (start < totalSize) {\n          const end = Math.min(start + chunkSize, totalSize);\n          const chunk = new Blob([arrayBuffer.slice(start, end)], {\n            type: 'application/octet-stream'\n          });\n          chunks.push(chunk);\n          start = end;\n        }\n        await initiateUpload();\n        const promises = [];\n        for (let i = 0; i < chunks.length; i++) {\n          const chunkSizeMb = chunks[i].size;\n          console.log(chunks[i].size);\n          console.log(`Chunk ${i} size: ${chunkSizeMb} MB`);\n          promises.push(uploadChunk(i, chunks[i]));\n        }\n        await Promise.all(promises);\n        await completeUpload();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zEC2Pas0fH20zQ/NbALJvRS9V0I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","uploadId","setUploadId","handleFileChange","event","target","files","ui","initiateUpload","formData","FormData","append","name","post","then","res","data","upload_id","uploadChunk","chunkNumber","chunk","console","log","filename","chunk_number","options","headers","byteLength","completeUpload","handleSubmit","preventDefault","chunkSize","chunks","reader","FileReader","onload","arrayBuffer","result","totalSize","start","end","Math","min","Blob","slice","type","push","promises","i","length","chunkSizeMb","size","Promise","all","error","readAsArrayBuffer","onSubmit","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  var ui = ''\n\n\n  // const initiateUpload = async () => {\n  //   const options = {\n  //     headers: {\n  //       'Content-Type': 'application/octet-stream',\n  //       'x-amz-acl': 'private'\n  //     }\n  //   };\n  //   const response = await axios.post(\n  //     `http://localhost:8000/initiate-upload?filename=${file.name}`,\n  //     null,\n  //     options\n  //   );\n  //   ui = response.data.upload_id;\n  // };\n\n\n  const initiateUpload = async () => {\n    const formData = new FormData();\n    formData.append('filename', file.name);\n    await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`)\n        .then((res) => {\n          ui = res.data.upload_id\n        })\n  };\n\n\n  const uploadChunk = async (chunkNumber, chunk) => {\n    console.log(chunk)\n    const data = {\n      filename: file.name,\n      chunk_number: chunkNumber,\n      chunk: chunk,\n      upload_id: ui\n    }\n    // data.append('filename', file.name)\n    // data.append('chunk_number', chunkNumber)\n    // data.append('chunk', chunk)\n    // data.append('upload_id', ui)\n    // console.log(data)\n  const options = {\n    headers: {\n      'Content-Type': 'application/octet-stream',\n      'x-amz-acl': 'private',\n      'x-amz-part-number': chunkNumber + 1,\n      'x-amz-upload-id': uploadId,\n      'Content-Length': chunk.byteLength\n    }\n  };\n  // const blob = new Blob([chunk]);\n  await axios.post(`http://localhost:8000/upload-chunk`, data).then((res) => {\n    console.log(res.data)\n  });\n};\n\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then((res) => {\n      console.log(res.data)\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024;\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      try {\n        const arrayBuffer = event.target.result;\n        const totalSize = arrayBuffer.byteLength;\n        let start = 0;\n        while (start < totalSize) {\n          const end = Math.min(start + chunkSize, totalSize);\n          const chunk = new Blob([arrayBuffer.slice(start, end)], { type: 'application/octet-stream' });\n          chunks.push(chunk);\n          start = end;\n        }\n        await initiateUpload();\n\n        const promises = [];\n        for (let i = 0; i < chunks.length; i++) {\n          const chunkSizeMb = chunks[i].size;\n          console.log(chunks[i].size);\n          console.log(`Chunk ${i} size: ${chunkSizeMb} MB`);\n          promises.push(uploadChunk(i, chunks[i]));\n        }\n        await Promise.all(promises);\n        await completeUpload();\n        } catch (error) {\n    console.log(error);\n  }\n      };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button type=\"submit\">Upload</button>\n    </form>\n  )\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAO,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAG5C,MAAMY,gBAAgB,GAAIC,KAAK,IAAK;IAClCJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,IAAIC,EAAE,GAAG,EAAE;;EAGX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEZ,IAAI,CAACa,IAAI,CAAC;IACtC,MAAMlB,KAAK,CAACmB,IAAI,CAAE,kDAAiDd,IAAI,CAACa,IAAK,EAAC,CAAC,CAC1EE,IAAI,CAAEC,GAAG,IAAK;MACbR,EAAE,GAAGQ,GAAG,CAACC,IAAI,CAACC,SAAS;IACzB,CAAC,CAAC;EACR,CAAC;EAGD,MAAMC,WAAW,GAAG,MAAAA,CAAOC,WAAW,EAAEC,KAAK,KAAK;IAChDC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,MAAMJ,IAAI,GAAG;MACXO,QAAQ,EAAExB,IAAI,CAACa,IAAI;MACnBY,YAAY,EAAEL,WAAW;MACzBC,KAAK,EAAEA,KAAK;MACZH,SAAS,EAAEV;IACb,CAAC;IACD;IACA;IACA;IACA;IACA;IACF,MAAMkB,OAAO,GAAG;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,0BAA0B;QAC1C,WAAW,EAAE,SAAS;QACtB,mBAAmB,EAAEP,WAAW,GAAG,CAAC;QACpC,iBAAiB,EAAElB,QAAQ;QAC3B,gBAAgB,EAAEmB,KAAK,CAACO;MAC1B;IACF,CAAC;IACD;IACA,MAAMjC,KAAK,CAACmB,IAAI,CAAE,oCAAmC,EAAEG,IAAI,CAAC,CAACF,IAAI,CAAEC,GAAG,IAAK;MACzEM,OAAO,CAACC,GAAG,CAACP,GAAG,CAACC,IAAI,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC;EAEC,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMlC,KAAK,CAACmB,IAAI,CAAE,kDAAiDd,IAAI,CAACa,IAAK,cAAaL,EAAG,EAAC,CAAC,CAACO,IAAI,CAAEC,GAAG,IAAK;MAC5GM,OAAO,CAACC,GAAG,CAACP,GAAG,CAACC,IAAI,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMa,YAAY,GAAG,MAAOzB,KAAK,IAAK;IACpCA,KAAK,CAAC0B,cAAc,EAAE;IACtB,MAAMC,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI;IACnC,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAO/B,KAAK,IAAK;MAC/B,IAAI;QACF,MAAMgC,WAAW,GAAGhC,KAAK,CAACC,MAAM,CAACgC,MAAM;QACvC,MAAMC,SAAS,GAAGF,WAAW,CAACT,UAAU;QACxC,IAAIY,KAAK,GAAG,CAAC;QACb,OAAOA,KAAK,GAAGD,SAAS,EAAE;UACxB,MAAME,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,GAAGR,SAAS,EAAEO,SAAS,CAAC;UAClD,MAAMlB,KAAK,GAAG,IAAIuB,IAAI,CAAC,CAACP,WAAW,CAACQ,KAAK,CAACL,KAAK,EAAEC,GAAG,CAAC,CAAC,EAAE;YAAEK,IAAI,EAAE;UAA2B,CAAC,CAAC;UAC7Fb,MAAM,CAACc,IAAI,CAAC1B,KAAK,CAAC;UAClBmB,KAAK,GAAGC,GAAG;QACb;QACA,MAAMhC,cAAc,EAAE;QAEtB,MAAMuC,QAAQ,GAAG,EAAE;QACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,MAAM,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;UACtC,MAAME,WAAW,GAAGlB,MAAM,CAACgB,CAAC,CAAC,CAACG,IAAI;UAClC9B,OAAO,CAACC,GAAG,CAACU,MAAM,CAACgB,CAAC,CAAC,CAACG,IAAI,CAAC;UAC3B9B,OAAO,CAACC,GAAG,CAAE,SAAQ0B,CAAE,UAASE,WAAY,KAAI,CAAC;UACjDH,QAAQ,CAACD,IAAI,CAAC5B,WAAW,CAAC8B,CAAC,EAAEhB,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC;QAC1C;QACA,MAAMI,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;QAC3B,MAAMnB,cAAc,EAAE;MACtB,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACpBjC,OAAO,CAACC,GAAG,CAACgC,KAAK,CAAC;MACpB;IACI,CAAC;IAEHrB,MAAM,CAACsB,iBAAiB,CAACxD,IAAI,CAAC;EAChC,CAAC;EAGD,oBACEH,OAAA;IAAM4D,QAAQ,EAAE3B,YAAa;IAAA4B,QAAA,gBAC3B7D,OAAA;MAAOiD,IAAI,EAAC,MAAM;MAACa,QAAQ,EAAEvD;IAAiB;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjDlE,OAAA;MAAQiD,IAAI,EAAC,QAAQ;MAAAY,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChC;AAEX;AAAChE,EAAA,CAlHQD,GAAG;AAAAkE,EAAA,GAAHlE,GAAG;AAoHZ,eAAeA,GAAG;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}