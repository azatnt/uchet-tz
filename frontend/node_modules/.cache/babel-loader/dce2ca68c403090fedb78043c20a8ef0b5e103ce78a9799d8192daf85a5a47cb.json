{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    let chunkArray = [];\n    const url = \"http://localhost:8000\";\n    for (let i = 0; i < chunks; i++) {\n      const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);\n      chunkArray.push(chunk);\n    }\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const {\n      data\n    } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const {\n      upload_id: uploadId\n    } = data;\n\n    // Step 2: Upload each chunk of the file\n\n    const formData = new FormData();\n    formData.append('chunks', JSON.stringify(chunkArray));\n    formData.append('filename', filename);\n    formData.append('upload_id', uploadId);\n    const uploadChunksResponse = await fetch(`${url}/upload-chunks`, {\n      method: 'POST',\n      body: formData\n    });\n    const uploadChunksData = await uploadChunksResponse.json();\n    const completeResponse = await fetch(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`, {\n      method: 'POST'\n    });\n    const completeData = await completeResponse.json();\n    //   let offset = 0;\n    // let completedChunks = 0;\n    // let errorOccurred = false;\n    // for (let i = 0; i < chunks; i++) {\n    //   const chunk = file.slice(offset, offset + chunkSize);\n    //   const chunkNumber = i;\n    //   const formData = new FormData();\n    //   formData.append(\"chunk\", chunk);\n    //   const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n    //     formData\n    //   );\n    //   if (response.data.error) {\n    //     errorOccurred = true;\n    //     break;\n    //   }\n    //   completedChunks++;\n    //   offset += chunkSize;\n    // }\n\n    // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n    //   formData,\n    //   {\n    //     onUploadProgress: (progressEvent) => {\n    //       const progress = Math.round(\n    //         (progressEvent.loaded / progressEvent.total) * 100\n    //       );\n    //       setUploadProgress(progress);\n    //     },\n    //   }\n    // );\n\n    //   console.log(errorOccurred)\n    //   console.log(completedChunks === chunks)\n    //   // Step 3: Complete the upload on the server\n    //   if (!errorOccurred && completedChunks === chunks) {\n    //     console.log(\"dsf\")\n    //   await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`);\n    //   setUploadProgress(100);\n    // } else {\n    //   setErrorMessage(\"An error occurred while uploading the file.\");\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: uploadFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileUpload\",\n        children: \"Choose a file to upload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileUpload\",\n        name: \"file\",\n        className: \"form-control-file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n      max: \"100\",\n      value: uploadProgress,\n      className: \"mt-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Xz8bhDaN5EfUCI1qG/yqxAQ72q8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","uploadProgress","setUploadProgress","errorMessage","setErrorMessage","uploadFile","event","preventDefault","file","target","elements","files","filename","name","fileSize","size","chunkSize","chunks","Math","ceil","chunkArray","url","i","chunk","slice","push","data","post","upload_id","uploadId","formData","FormData","append","JSON","stringify","uploadChunksResponse","fetch","method","body","uploadChunksData","json","completeResponse","completeData","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","max","value","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    let chunkArray = [];\n    const url = \"http://localhost:8000\";\n\n\n    for (let i = 0; i < chunks; i++) {\n      const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);\n      chunkArray.push(chunk);\n    }\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const { data } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const { upload_id: uploadId } = data;\n\n    // Step 2: Upload each chunk of the file\n\n\n\n\n    const formData = new FormData();\n      formData.append('chunks', JSON.stringify(chunkArray));\n      formData.append('filename', filename);\n      formData.append('upload_id', uploadId);\n      const uploadChunksResponse = await fetch(`${url}/upload-chunks`, {\n        method: 'POST',\n        body: formData,\n      });\n      const uploadChunksData = await uploadChunksResponse.json();\n\n      const completeResponse = await fetch(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`, {\n        method: 'POST',\n      });\n      const completeData = await completeResponse.json();\n  //   let offset = 0;\n  // let completedChunks = 0;\n  // let errorOccurred = false;\n  // for (let i = 0; i < chunks; i++) {\n  //   const chunk = file.slice(offset, offset + chunkSize);\n  //   const chunkNumber = i;\n  //   const formData = new FormData();\n  //   formData.append(\"chunk\", chunk);\n  //   const response = await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n  //     formData\n  //   );\n  //   if (response.data.error) {\n  //     errorOccurred = true;\n  //     break;\n  //   }\n  //   completedChunks++;\n  //   offset += chunkSize;\n  // }\n\n\n\n      // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n      //   formData,\n      //   {\n      //     onUploadProgress: (progressEvent) => {\n      //       const progress = Math.round(\n      //         (progressEvent.loaded / progressEvent.total) * 100\n      //       );\n      //       setUploadProgress(progress);\n      //     },\n      //   }\n      // );\n\n\n  //   console.log(errorOccurred)\n  //   console.log(completedChunks === chunks)\n  //   // Step 3: Complete the upload on the server\n  //   if (!errorOccurred && completedChunks === chunks) {\n  //     console.log(\"dsf\")\n  //   await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`);\n  //   setUploadProgress(100);\n  // } else {\n  //   setErrorMessage(\"An error occurred while uploading the file.\");\n  // }\n  }\n\n  return (\n    <form onSubmit={uploadFile}>\n      <div className=\"form-group\">\n        <label htmlFor=\"fileUpload\">Choose a file to upload:</label>\n        <input\n          type=\"file\"\n          id=\"fileUpload\"\n          name=\"file\"\n          className=\"form-control-file\"\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Upload\n      </button>\n      {uploadProgress > 0 && (\n        <progress max=\"100\" value={uploadProgress} className=\"mt-2\" />\n      )}\n    </form>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,eAAeU,UAAUA,CAACC,KAAK,EAAE;IAC/BA,KAAK,CAACC,cAAc,EAAE;IACtB,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAACC,QAAQ,CAACF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;IAChD,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,IAAI;IAC1B,MAAMC,QAAQ,GAAGN,IAAI,CAACO,IAAI;IAC1B,MAAMC,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACL,QAAQ,GAAGE,SAAS,CAAC;IAC9C,IAAII,UAAU,GAAG,EAAE;IACnB,MAAMC,GAAG,GAAG,uBAAuB;IAGnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC/B,MAAMC,KAAK,GAAGf,IAAI,CAACgB,KAAK,CAACF,CAAC,GAAGN,SAAS,EAAE,CAACM,CAAC,GAAG,CAAC,IAAIN,SAAS,CAAC;MAC5DI,UAAU,CAACK,IAAI,CAACF,KAAK,CAAC;IACxB;;IAEA;IACA,MAAM;MAAEG;IAAK,CAAC,GAAG,MAAM9B,KAAK,CAAC+B,IAAI,CAAE,GAAEN,GAAI,6BAA4BT,QAAS,EAAC,CAAC;IAChF,MAAM;MAAEgB,SAAS,EAAEC;IAAS,CAAC,GAAGH,IAAI;;IAEpC;;IAKA,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC7BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACd,UAAU,CAAC,CAAC;IACrDU,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEpB,QAAQ,CAAC;IACrCkB,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,QAAQ,CAAC;IACtC,MAAMM,oBAAoB,GAAG,MAAMC,KAAK,CAAE,GAAEf,GAAI,gBAAe,EAAE;MAC/DgB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAER;IACR,CAAC,CAAC;IACF,MAAMS,gBAAgB,GAAG,MAAMJ,oBAAoB,CAACK,IAAI,EAAE;IAE1D,MAAMC,gBAAgB,GAAG,MAAML,KAAK,CAAE,GAAEf,GAAI,6BAA4BT,QAAS,cAAaiB,QAAS,EAAC,EAAE;MACxGQ,MAAM,EAAE;IACV,CAAC,CAAC;IACF,MAAMK,YAAY,GAAG,MAAMD,gBAAgB,CAACD,IAAI,EAAE;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAII;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;;EAEA,oBACE1C,OAAA;IAAM6C,QAAQ,EAAEtC,UAAW;IAAAuC,QAAA,gBACzB9C,OAAA;MAAK+C,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACzB9C,OAAA;QAAOgD,OAAO,EAAC,YAAY;QAAAF,QAAA,EAAC;MAAwB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eAC5DpD,OAAA;QACEqD,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,YAAY;QACfvC,IAAI,EAAC,MAAM;QACXgC,SAAS,EAAC;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNpD,OAAA;MAAQqD,IAAI,EAAC,QAAQ;MAACN,SAAS,EAAC,iBAAiB;MAAAD,QAAA,EAAC;IAElD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EACRjD,cAAc,GAAG,CAAC,iBACjBH,OAAA;MAAUuD,GAAG,EAAC,KAAK;MAACC,KAAK,EAAErD,cAAe;MAAC4C,SAAS,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEX;AAAClD,EAAA,CA5GQD,GAAG;AAAAwD,EAAA,GAAHxD,GAAG;AA8GZ,eAAeA,GAAG;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}