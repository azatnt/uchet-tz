{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n    const response = await fetch(`http://localhost:8000/initiate-upload?filename=${filename}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n        const reader = new FileReader();\n        reader.onload = async () => {\n          const arrayBuffer = reader.result;\n          const uint8array = new Uint8Array(arrayBuffer);\n          await axios.post('http://localhost:8000/upload-chunk', uint8array, {\n            headers: {\n              \"Content-Type\": 'application/octet-stream',\n              'Content-Disposition': `attachment;filename=${filename}`\n            }\n          }).then(res => {\n            console.log(res.data);\n          });\n          //   const response = fetch('http://localhost:8000/upload-chunk', {\n          //     method: 'POST',\n          //     body: formData\n          // });\n          // const data = await response.json();\n          // console.log(data);\n        };\n\n        reader.readAsArrayBuffer(chunk);\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', chunk);\n        formData.append('upload_id', uploadId);\n        offset += chunkSize;\n      }\n    }\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        filename: filename,\n        upload_id: uploadId\n      })\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      encType: \"multipart/form-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: uploadFile,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","uploadFile","fileInput","document","querySelector","files","filename","name","response","fetch","method","headers","data","json","uploadId","upload_id","i","length","file","chunkSize","fileSize","size","chunks","Math","ceil","offset","j","chunk","slice","chunkNumber","formData","FormData","reader","FileReader","onload","arrayBuffer","result","uint8array","Uint8Array","post","then","res","console","log","readAsArrayBuffer","append","response2","body","JSON","stringify","data2","children","encType","type","multiple","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  async function uploadFile() {\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    const files = fileInput.files;\n    const filename = files[0].name;\n\n    const response = await fetch(`http://localhost:8000/initiate-upload?filename=${filename}`,{\n      method: 'POST',\n\n      headers: {\n        'Content-Type': 'application/json'\n      },\n\n    });\n    const data = await response.json();\n    const uploadId = data.upload_id;\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const chunkSize = 100 * 1024 * 1024; // 5 MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let offset = 0;\n      for (let j = 0; j < chunks; j++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const chunkNumber = j;\n        const formData = new FormData();\n        const reader = new FileReader()\n        reader.onload =async () => {\n          const arrayBuffer = reader.result\n          const uint8array = new Uint8Array(arrayBuffer)\n          await axios.post('http://localhost:8000/upload-chunk', uint8array, {\n            headers: {\n              \"Content-Type\": 'application/octet-stream',\n            'Content-Disposition': `attachment;filename=${filename}`\n            }\n\n          }).then(res => {console.log(res.data)})\n        //   const response = fetch('http://localhost:8000/upload-chunk', {\n        //     method: 'POST',\n        //     body: formData\n        // });\n        // const data = await response.json();\n        // console.log(data);\n        }\n        reader.readAsArrayBuffer(chunk)\n\n        formData.append('filename', filename);\n        formData.append('chunk_number', chunkNumber);\n        formData.append('chunk', chunk);\n        formData.append('upload_id', uploadId);\n\n\n\n\n        offset += chunkSize;\n      }\n    }\n\n    const response2 = await fetch('http://localhost:8000/complete-upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({filename: filename, upload_id: uploadId})\n    });\n    const data2 = await response2.json();\n    console.log(data2);\n  }\n\n\n  return (\n      <>\n        <form encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"file\" multiple/>\n          <button type=\"button\" onClick={uploadFile}>Upload</button>\n      </form>\n      </>\n  )\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAO,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EACb,eAAeC,UAAUA,CAAA,EAAG;IAC1B,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC;IAC9D,MAAMC,KAAK,GAAGH,SAAS,CAACG,KAAK;IAC7B,MAAMC,QAAQ,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI;IAE9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDH,QAAS,EAAC,EAAC;MACxFI,MAAM,EAAE,MAAM;MAEdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IAEF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAClC,MAAMC,QAAQ,GAAGF,IAAI,CAACG,SAAS;IAE/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,KAAK,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,IAAI,GAAGb,KAAK,CAACW,CAAC,CAAC;MACrB,MAAMG,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;MACrC,MAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAI;MAC1B,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACJ,QAAQ,GAAGD,SAAS,CAAC;MAC9C,IAAIM,MAAM,GAAG,CAAC;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAE;QAC/B,MAAMC,KAAK,GAAGT,IAAI,CAACU,KAAK,CAACH,MAAM,EAAEA,MAAM,GAAGN,SAAS,CAAC;QACpD,MAAMU,WAAW,GAAGH,CAAC;QACrB,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,EAAE;QAC/B,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;QAC/BD,MAAM,CAACE,MAAM,GAAE,YAAY;UACzB,MAAMC,WAAW,GAAGH,MAAM,CAACI,MAAM;UACjC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;UAC9C,MAAMxC,KAAK,CAAC4C,IAAI,CAAC,oCAAoC,EAAEF,UAAU,EAAE;YACjE1B,OAAO,EAAE;cACP,cAAc,EAAE,0BAA0B;cAC5C,qBAAqB,EAAG,uBAAsBL,QAAS;YACvD;UAEF,CAAC,CAAC,CAACkC,IAAI,CAACC,GAAG,IAAI;YAACC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC7B,IAAI,CAAC;UAAA,CAAC,CAAC;UACzC;UACA;UACA;UACA;UACA;UACA;QACA,CAAC;;QACDoB,MAAM,CAACY,iBAAiB,CAACjB,KAAK,CAAC;QAE/BG,QAAQ,CAACe,MAAM,CAAC,UAAU,EAAEvC,QAAQ,CAAC;QACrCwB,QAAQ,CAACe,MAAM,CAAC,cAAc,EAAEhB,WAAW,CAAC;QAC5CC,QAAQ,CAACe,MAAM,CAAC,OAAO,EAAElB,KAAK,CAAC;QAC/BG,QAAQ,CAACe,MAAM,CAAC,WAAW,EAAE/B,QAAQ,CAAC;QAKtCW,MAAM,IAAIN,SAAS;MACrB;IACF;IAEA,MAAM2B,SAAS,GAAG,MAAMrC,KAAK,CAAC,uCAAuC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDoC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAC3C,QAAQ,EAAEA,QAAQ;QAAES,SAAS,EAAED;MAAQ,CAAC;IAChE,CAAC,CAAC;IACF,MAAMoC,KAAK,GAAG,MAAMJ,SAAS,CAACjC,IAAI,EAAE;IACpC6B,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;EACpB;EAGA,oBACIrD,OAAA,CAAAE,SAAA;IAAAoD,QAAA,eACEtD,OAAA;MAAMuD,OAAO,EAAC,qBAAqB;MAAAD,QAAA,gBACnCtD,OAAA;QAAOwD,IAAI,EAAC,MAAM;QAAC9C,IAAI,EAAC,MAAM;QAAC+C,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,eACvC7D,OAAA;QAAQwD,IAAI,EAAC,QAAQ;QAACM,OAAO,EAAE1D,UAAW;QAAAkD,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACvD,iBACJ;AAET;AAACE,EAAA,GA/EQ5D,GAAG;AAiFZ,eAAeA,GAAG;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}