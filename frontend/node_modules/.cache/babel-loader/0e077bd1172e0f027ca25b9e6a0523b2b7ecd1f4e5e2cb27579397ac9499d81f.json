{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  var ui = '';\n\n  // const initiateUpload = async () => {\n  //   const options = {\n  //     headers: {\n  //       'Content-Type': 'application/octet-stream',\n  //       'x-amz-acl': 'private'\n  //     }\n  //   };\n  //   const response = await axios.post(\n  //     `http://localhost:8000/initiate-upload?filename=${file.name}`,\n  //     null,\n  //     options\n  //   );\n  //   ui = response.data.upload_id;\n  // };\n\n  const initiateUpload = async () => {\n    const formData = new FormData();\n    formData.append('filename', file.name);\n    await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`).then(res => {\n      ui = res.data.upload_id;\n    });\n  };\n  const uploadChunk = async (chunkNumber, chunk) => {\n    await axios.post(`http://localhost:8000/upload-chunk?filename=${file.name}&chunk_number=${chunkNumber}&chunk=${chunk}&upload_id=${ui}`).then(res => {\n      console.log(res.data);\n    });\n  };\n\n  //   const uploadChunk = async (chunkNumber, chunk) => {\n  //   const options = {\n  //     headers: {\n  //       'Content-Type': 'application/octet-stream',\n  //       'x-amz-acl': 'private',\n  //       'x-amz-part-number': chunkNumber + 1,\n  //       'x-amz-upload-id': uploadId,\n  //       'Content-Length': chunk.byteLength\n  //     }\n  //   };\n  //   const blob = new Blob([chunk]);\n  //   await axios.post(\n  //     `http://localhost:8000/upload-chunk?filename=${file.name}`,\n  //     blob,\n  //     options\n  //   );\n  // };\n\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then(res => {\n      console.log(res.data);\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024; // 5 MB\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const arrayBuffer = event.target.result;\n      const totalSize = arrayBuffer.byteLength;\n      let start = 0;\n      while (start < totalSize) {\n        const end = Math.min(start + chunkSize, totalSize);\n        const chunk = new Blob([arrayBuffer.slice(start, end)], {\n          type: 'application/octet-stream'\n        });\n        chunks.push(chunk);\n        start = end;\n      }\n      await initiateUpload();\n      const promises = [];\n      for (let i = 0; i < chunks.length; i++) {\n        console.log(`Chunk ${i} size: ${chunkSizeMb.toFixed(2)} MB`);\n        promises.push(uploadChunk(i, chunks[i]));\n      }\n      await Promise.all(promises);\n      await completeUpload();\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zEC2Pas0fH20zQ/NbALJvRS9V0I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","uploadId","setUploadId","handleFileChange","event","target","files","ui","initiateUpload","formData","FormData","append","name","post","then","res","data","upload_id","uploadChunk","chunkNumber","chunk","console","log","completeUpload","handleSubmit","preventDefault","chunkSize","chunks","reader","FileReader","onload","arrayBuffer","result","totalSize","byteLength","start","end","Math","min","Blob","slice","type","push","promises","i","length","chunkSizeMb","toFixed","Promise","all","readAsArrayBuffer","onSubmit","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  var ui = ''\n\n\n  // const initiateUpload = async () => {\n  //   const options = {\n  //     headers: {\n  //       'Content-Type': 'application/octet-stream',\n  //       'x-amz-acl': 'private'\n  //     }\n  //   };\n  //   const response = await axios.post(\n  //     `http://localhost:8000/initiate-upload?filename=${file.name}`,\n  //     null,\n  //     options\n  //   );\n  //   ui = response.data.upload_id;\n  // };\n\n\n  const initiateUpload = async () => {\n    const formData = new FormData();\n    formData.append('filename', file.name);\n    await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`)\n        .then((res) => {\n          ui = res.data.upload_id\n        })\n  };\n\n  const uploadChunk = async (chunkNumber, chunk) => {\n    await axios.post(`http://localhost:8000/upload-chunk?filename=${file.name}&chunk_number=${chunkNumber}&chunk=${chunk}&upload_id=${ui}`).then((res) => {\n      console.log(res.data)\n    });\n  };\n\n\n//   const uploadChunk = async (chunkNumber, chunk) => {\n//   const options = {\n//     headers: {\n//       'Content-Type': 'application/octet-stream',\n//       'x-amz-acl': 'private',\n//       'x-amz-part-number': chunkNumber + 1,\n//       'x-amz-upload-id': uploadId,\n//       'Content-Length': chunk.byteLength\n//     }\n//   };\n//   const blob = new Blob([chunk]);\n//   await axios.post(\n//     `http://localhost:8000/upload-chunk?filename=${file.name}`,\n//     blob,\n//     options\n//   );\n// };\n\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then((res) => {\n      console.log(res.data)\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024; // 5 MB\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      const arrayBuffer = event.target.result;\n      const totalSize = arrayBuffer.byteLength;\n      let start = 0;\n      while (start < totalSize) {\n        const end = Math.min(start + chunkSize, totalSize);\n        const chunk = new Blob([arrayBuffer.slice(start, end)], { type: 'application/octet-stream' });\n        chunks.push(chunk);\n        start = end;\n      }\n      await initiateUpload();\n\n      const promises = [];\n      for (let i = 0; i < chunks.length; i++) {\n        console.log(`Chunk ${i} size: ${chunkSizeMb.toFixed(2)} MB`);\n        promises.push(uploadChunk(i, chunks[i]));\n      }\n      await Promise.all(promises);\n      await completeUpload();\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button type=\"submit\">Upload</button>\n    </form>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}