{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  var ui = '';\n  const initiateUpload = async () => {\n    const options = {\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'x-amz-acl': 'private'\n      }\n    };\n    const response = await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`, null, options);\n    setUploadId(response.data.upload_id);\n  };\n\n  // const initiateUpload = async () => {\n  //   const formData = new FormData();\n  //   formData.append('filename', file.name);\n  //   await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`)\n  //       .then((res) => {\n  //         ui = res.data.upload_id\n  //       })\n  // };\n\n  // const uploadChunk = async (chunkNumber, chunk) => {\n  //   await axios.post(`http://localhost:8000/upload-chunk?filename=${file.name}&chunk_number=${chunkNumber}&chunk=${chunk}&upload_id=${ui}`).then((res) => {\n  //     console.log(res.data)\n  //   });\n  // };\n\n  const uploadChunk = async (chunkNumber, chunk) => {\n    const options = {\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'x-amz-acl': 'private',\n        'x-amz-part-number': chunkNumber + 1,\n        'x-amz-upload-id': uploadId,\n        'Content-Length': chunk.byteLength\n      }\n    };\n    const blob = new Blob([chunk]);\n    await axios.put(`http://localhost:8000/upload-chunk?filename=${file.name}`, blob, options);\n  };\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then(res => {\n      console.log(res.data);\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024; // 5 MB\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const arrayBuffer = event.target.result;\n      const totalSize = arrayBuffer.byteLength;\n      let start = 0;\n      while (start < totalSize) {\n        const end = Math.min(start + chunkSize, totalSize);\n        const chunk = arrayBuffer.slice(start, end);\n        chunks.push(chunk);\n        start = end;\n      }\n      await initiateUpload();\n      const promises = [];\n      for (let i = 0; i < chunks.length; i++) {\n        promises.push(uploadChunk(i, chunks[i]));\n      }\n      await Promise.all(promises);\n      await completeUpload();\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zEC2Pas0fH20zQ/NbALJvRS9V0I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","uploadId","setUploadId","handleFileChange","event","target","files","ui","initiateUpload","options","headers","response","post","name","data","upload_id","uploadChunk","chunkNumber","chunk","byteLength","blob","Blob","put","completeUpload","then","res","console","log","handleSubmit","preventDefault","chunkSize","chunks","reader","FileReader","onload","arrayBuffer","result","totalSize","start","end","Math","min","slice","push","promises","i","length","Promise","all","readAsArrayBuffer","onSubmit","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadId, setUploadId] = useState('');\n\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  var ui = ''\n\n\n  const initiateUpload = async () => {\n    const options = {\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'x-amz-acl': 'private'\n      }\n    };\n    const response = await axios.post(\n      `http://localhost:8000/initiate-upload?filename=${file.name}`,\n      null,\n      options\n    );\n    setUploadId(response.data.upload_id);\n  };\n\n\n  // const initiateUpload = async () => {\n  //   const formData = new FormData();\n  //   formData.append('filename', file.name);\n  //   await axios.post(`http://localhost:8000/initiate-upload?filename=${file.name}`)\n  //       .then((res) => {\n  //         ui = res.data.upload_id\n  //       })\n  // };\n\n  // const uploadChunk = async (chunkNumber, chunk) => {\n  //   await axios.post(`http://localhost:8000/upload-chunk?filename=${file.name}&chunk_number=${chunkNumber}&chunk=${chunk}&upload_id=${ui}`).then((res) => {\n  //     console.log(res.data)\n  //   });\n  // };\n\n\n  const uploadChunk = async (chunkNumber, chunk) => {\n  const options = {\n    headers: {\n      'Content-Type': 'application/octet-stream',\n      'x-amz-acl': 'private',\n      'x-amz-part-number': chunkNumber + 1,\n      'x-amz-upload-id': uploadId,\n      'Content-Length': chunk.byteLength\n    }\n  };\n  const blob = new Blob([chunk]);\n  await axios.put(\n    `http://localhost:8000/upload-chunk?filename=${file.name}`,\n    blob,\n    options\n  );\n};\n\n  const completeUpload = async () => {\n    await axios.post(`http://localhost:8000/complete-upload?filename=${file.name}&upload_id=${ui}`).then((res) => {\n      console.log(res.data)\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const chunkSize = 100 * 1024 * 1024; // 5 MB\n    const chunks = [];\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      const arrayBuffer = event.target.result;\n      const totalSize = arrayBuffer.byteLength;\n      let start = 0;\n      while (start < totalSize) {\n        const end = Math.min(start + chunkSize, totalSize);\n        const chunk = arrayBuffer.slice(start, end);\n        chunks.push(chunk);\n        start = end;\n      }\n      await initiateUpload();\n\n      const promises = [];\n      for (let i = 0; i < chunks.length; i++) {\n        promises.push(uploadChunk(i, chunks[i]));\n      }\n      await Promise.all(promises);\n      await completeUpload();\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button type=\"submit\">Upload</button>\n    </form>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}