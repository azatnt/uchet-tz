{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const CHUNK_SIZE = 50 * 1024 * 1024; // 1MB\n\n  const handleFileInput = e => {\n    setSelectedFiles(e.target.files);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!Array.isArray(selectedFiles) || selectedFiles.length === 0) {\n      return;\n    }\n    const uploadIds = await Promise.all(Array.from(selectedFiles).map(async file => {\n      const end = Math.min(CHUNK_SIZE, file.size);\n      return fetch(\"http://localhost:8000/initiate-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/octet-stream\",\n          \"Content-Range\": `bytes 0-${end - 1}/${file.size}`,\n          \"Content-Disposition\": `attachment; filename=\"${file.name}\"`\n        },\n        body: file\n      }).then(response => response.json()).then(data => data.uploadId);\n    }));\n    await Promise.all(Array.from(selectedFiles).map(async (file, index) => {\n      const CHUNK_SIZE = 1024 * 1024; // 1MB\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / CHUNK_SIZE);\n      const uploadUrl = `http://localhost:8000/upload?fileName=${encodeURIComponent(file.name)}&uploadId=${encodeURIComponent(uploadIds[index])}`;\n      const chunkPromises = [];\n      for (let chunkIndex = 0; chunkIndex < chunks; chunkIndex++) {\n        const start = chunkIndex * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, fileSize);\n        const formData = new FormData();\n        formData.append(\"chunkIndex\", chunkIndex);\n        formData.append(\"chunks\", chunks);\n        formData.append(\"file\", file.slice(start, end), file.name);\n        chunkPromises.push(fetch(uploadUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            \"Content-Range\": `bytes ${start}-${end - 1}/${fileSize}`\n          },\n          body: formData.get(\"file\")\n        }));\n      }\n      await Promise.all(chunkPromises);\n    }));\n    console.log(\"Files uploaded successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6iJwk1gH4hB0xa84T6RYQXjKu58=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFiles","setSelectedFiles","CHUNK_SIZE","handleFileInput","e","target","files","handleSubmit","preventDefault","Array","isArray","length","uploadIds","Promise","all","from","map","file","end","Math","min","size","fetch","method","headers","name","body","then","response","json","data","uploadId","index","fileSize","chunks","ceil","uploadUrl","encodeURIComponent","chunkPromises","chunkIndex","start","formData","FormData","append","slice","push","get","console","log","className","children","onSubmit","type","multiple","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const CHUNK_SIZE = 50 * 1024 * 1024; // 1MB\n\n  const handleFileInput = (e) => {\n    setSelectedFiles(e.target.files);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!Array.isArray(selectedFiles) || selectedFiles.length === 0) {\n      return;\n    }\n\n    const uploadIds = await Promise.all(\n      Array.from(selectedFiles).map(async (file) => {\n        const end = Math.min(CHUNK_SIZE, file.size);\n\n        return fetch(\"http://localhost:8000/initiate-upload\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            \"Content-Range\": `bytes 0-${end - 1}/${file.size}`,\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n          },\n          body: file,\n        })\n          .then((response) => response.json())\n          .then((data) => data.uploadId);\n      })\n    );\n\n    await Promise.all(\n      Array.from(selectedFiles).map(async (file, index) => {\n        const CHUNK_SIZE = 1024 * 1024; // 1MB\n        const fileSize = file.size;\n        const chunks = Math.ceil(fileSize / CHUNK_SIZE);\n\n        const uploadUrl = `http://localhost:8000/upload?fileName=${encodeURIComponent(\n          file.name\n        )}&uploadId=${encodeURIComponent(uploadIds[index])}`;\n\n        const chunkPromises = [];\n\n        for (let chunkIndex = 0; chunkIndex < chunks; chunkIndex++) {\n          const start = chunkIndex * CHUNK_SIZE;\n          const end = Math.min(start + CHUNK_SIZE, fileSize);\n\n          const formData = new FormData();\n          formData.append(\"chunkIndex\", chunkIndex);\n          formData.append(\"chunks\", chunks);\n          formData.append(\"file\", file.slice(start, end), file.name);\n\n          chunkPromises.push(\n            fetch(uploadUrl, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/octet-stream\",\n                \"Content-Range\": `bytes ${start}-${end - 1}/${fileSize}`,\n              },\n              body: formData.get(\"file\"),\n            })\n          );\n        }\n\n        await Promise.all(chunkPromises);\n      })\n    );\n\n    console.log(\"Files uploaded successfully!\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"file\" multiple onChange={handleFileInput} />\n        <button type=\"submit\">Upload</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}