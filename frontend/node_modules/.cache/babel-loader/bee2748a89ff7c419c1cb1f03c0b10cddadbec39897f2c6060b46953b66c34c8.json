{"ast":null,"code":"var _jsxFileName = \"/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [uploadProgress, setUploadProgress] = useState(0);\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    const url = \"http://localhost:8000\";\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const {\n      data\n    } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const {\n      upload_id: uploadId\n    } = data;\n\n    // Step 2: Upload each chunk of the file\n    let offset = 0;\n    for (let i = 0; i < chunks; i++) {\n      const parts = [];\n      let offset = 0;\n      for (let i = 0; i < chunks; i++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        parts.push(chunk);\n        offset += chunkSize;\n      }\n      const chunk = file.slice(offset, offset + chunkSize);\n      const chunkNumber = i;\n      const formData = new FormData();\n      formData.append(\"chunk\", chunk);\n      await Promise.all(parts.map(async chunk => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n        return axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`, formData);\n      }));\n      // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n      //   formData,\n      //   {\n      //     onUploadProgress: (progressEvent) => {\n      //       const progress = Math.round(\n      //         (progressEvent.loaded / progressEvent.total) * 100\n      //       );\n      //       setUploadProgress(progress);\n      //     },\n      //   }\n      // );\n      offset += chunkSize;\n    }\n\n    // Step 3: Complete the upload on the server\n    await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`);\n    setUploadProgress(100);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: uploadFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileUpload\",\n        children: \"Choose a file to upload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileUpload\",\n        name: \"file\",\n        className: \"form-control-file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n      max: \"100\",\n      value: uploadProgress,\n      className: \"mt-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bmquC9tpPqL001G3ZfJRUW/GSHc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","uploadProgress","setUploadProgress","uploadFile","event","preventDefault","file","target","elements","files","filename","name","fileSize","size","chunkSize","chunks","Math","ceil","url","data","post","upload_id","uploadId","offset","i","parts","chunk","slice","push","chunkNumber","formData","FormData","append","Promise","all","map","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","max","value","_c","$RefreshReg$"],"sources":["/Users/azatamanzol/PycharmProjects/uchet/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  async function uploadFile(event) {\n    event.preventDefault();\n    const file = event.target.elements.file.files[0];\n    const filename = file.name;\n    const fileSize = file.size;\n    const chunkSize = 100 * 1024 * 1024; // 100 MB\n    const chunks = Math.ceil(fileSize / chunkSize);\n    const url = \"http://localhost:8000\";\n\n    // Step 1: Initiate upload and get an upload ID from the server\n    const { data } = await axios.post(`${url}/initiate-upload?filename=${filename}`);\n    const { upload_id: uploadId } = data;\n\n    // Step 2: Upload each chunk of the file\n    let offset = 0;\n    for (let i = 0; i < chunks; i++) {\n\n      const parts = [];\n      let offset = 0;\n      for (let i = 0; i < chunks; i++) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        parts.push(chunk);\n        offset += chunkSize;\n      }\n\n\n      const chunk = file.slice(offset, offset + chunkSize);\n      const chunkNumber = i;\n      const formData = new FormData();\n      formData.append(\"chunk\", chunk);\n\n      await Promise.all(parts.map(async (chunk) => {\n        const formData = new FormData();\n        formData.append(\"chunk\", chunk);\n\n        return axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`, formData);\n      }));\n      // await axios.post(`${url}/upload-chunk?filename=${filename}&chunk_number=${chunkNumber}&upload_id=${uploadId}`,\n      //   formData,\n      //   {\n      //     onUploadProgress: (progressEvent) => {\n      //       const progress = Math.round(\n      //         (progressEvent.loaded / progressEvent.total) * 100\n      //       );\n      //       setUploadProgress(progress);\n      //     },\n      //   }\n      // );\n      offset += chunkSize;\n    }\n\n    // Step 3: Complete the upload on the server\n    await axios.post(`${url}/complete-upload?filename=${filename}&upload_id=${uploadId}`\n    );\n    setUploadProgress(100);\n  }\n\n  return (\n    <form onSubmit={uploadFile}>\n      <div className=\"form-group\">\n        <label htmlFor=\"fileUpload\">Choose a file to upload:</label>\n        <input\n          type=\"file\"\n          id=\"fileUpload\"\n          name=\"file\"\n          className=\"form-control-file\"\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Upload\n      </button>\n      {uploadProgress > 0 && (\n        <progress max=\"100\" value={uploadProgress} className=\"mt-2\" />\n      )}\n    </form>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}